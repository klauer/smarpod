record(bo, "$(BASE):CMD:INIT") {
    field(DESC, "(setup EOL and number format)")
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto initialize_smarpod($(BASE)) $(DEV)")
    field(PINI, "YES")
    field(SCAN, "Passive")
    field(FLNK, "$(BASE):CMD:ALL_STATUS")
}

record(fanout, "$(BASE):CMD:ALL_STATUS") {
    field(LNK1, "$(BASE):UNIT")
    field(LNK2, "$(BASE):CMD:READ_VER")
    field(LNK3, "$(BASE):CMD:READ_STATUS")
}

# Controlling unit number
record(ao, "$(BASE):CMD:UNIT") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto set_int_init($(BASE),\\%unit) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(FLNK, "$(BASE):UNIT")
    info(autosaveFields, "VAL")
}

record(ai, "$(BASE):UNIT")
{
    field(DESC, "Selected SmarPod unit")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_int($(BASE),\\%unit) $(DEV)")
    field(SCAN, "Passive")
}

# Reference
record(bo, "$(BASE):CMD:REF") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto reference($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(ZNAM, "Reference")
    field(ONAM, "Reference")
}

record(bi, "$(BASE):REF")
{
    field(DESC, "Readback referenced state")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_int($(BASE),ref) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "1 second")
    field(ZNAM, "Unreferenced")
    field(ONAM, "Referenced")
}

record(ai, "$(BASE):_REF")
{
    field(DESC, "Async reference response")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto async_ref_response($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(TPRO, 1)
}

record(mbbo, "$(BASE):CMD:REF_METHOD")
{
    field(DESC, "Set reference method")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(OUT,  "@SmarPod.proto set_ref_method($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "default")
    field(ONST, "sequential")
    field(TWST, "z-safe")
    field(THST, "xy-safe")
    field(FLNK, "$(BASE):REF_METHOD")
}

record(mbbi, "$(BASE):REF_METHOD")
{
    field(DESC, "Readback reference method")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(INP,  "@SmarPod.proto get_ref_method($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "default")
    field(ONST, "sequential")
    field(TWST, "z-safe")
    field(THST, "xy-safe")
}

record(mbbo, "$(BASE):CMD:REF_X_DIRECT")
{
    field(DESC, "Set reference x-direction")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(OUT,  "@SmarPod.proto set_ref_x($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "default")
    field(ONST, "pos")
    field(TWST, "neg")
    field(THST, "pos-reverse")
    field(FRST, "neg-reverse")
    field(FLNK, "$(BASE):REF_X_DIRECT")
}

record(mbbi, "$(BASE):REF_X_DIRECT")
{
    field(DESC, "Readback reference x-direction")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(INP,  "@SmarPod.proto get_ref_x($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "default")
    field(ONST, "pos")
    field(TWST, "neg")
    field(THST, "pos-reverse")
    field(FRST, "neg-reverse")
}

record(mbbo, "$(BASE):CMD:REF_Y_DIRECT")
{
    field(DESC, "Set reference y-direction")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(OUT,  "@SmarPod.proto set_ref_y($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "default")
    field(ONST, "pos")
    field(TWST, "neg")
    field(THST, "pos-reverse")
    field(FRST, "neg-reverse")
    field(FLNK, "$(BASE):REF_Y_DIRECT")
}

record(mbbi, "$(BASE):REF_Y_DIRECT")
{
    field(DESC, "Readback reference y-direction")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(INP,  "@SmarPod.proto get_ref_y($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "default")
    field(ONST, "pos")
    field(TWST, "neg")
    field(THST, "pos-reverse")
    field(FRST, "neg-reverse")
}

record(mbbo, "$(BASE):CMD:REF_Z_DIRECT")
{
    field(DESC, "Set reference z-direction")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(OUT,  "@SmarPod.proto set_ref_z($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "default")
    field(ONST, "pos")
    field(TWST, "neg")
    field(THST, "pos-reverse")
    field(FRST, "neg-reverse")
    field(FLNK, "$(BASE):REF_Z_DIRECT")
}

record(mbbi, "$(BASE):REF_Z_DIRECT")
{
    field(DESC, "Readback reference z-direction")
    field(DTYP, "stream")
    field(PINI, "NO")
    field(INP,  "@SmarPod.proto get_ref_z($(BASE)) $(DEV)")
    field(SCAN, "Passive")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "default")
    field(ONST, "pos")
    field(TWST, "neg")
    field(THST, "pos-reverse")
    field(FRST, "neg-reverse")
}

# Positions - Move
record(bo, "$(BASE):CMD:MOVE")
{
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto move_mm($(BASE)) $(DEV)")
}

record(ao, "$(BASE):CMD:X")
{
    field(PREC, "6")
    field(EGU, "mm")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(ao, "$(BASE):CMD:Y")
{
    field(PREC, "6")
    field(EGU, "mm")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(ao, "$(BASE):CMD:Z")
{
    field(PREC, "6")
    field(EGU, "mm")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(ao, "$(BASE):CMD:RX")
{
    field(PREC, "6")
    field(EGU, "deg")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(ao, "$(BASE):CMD:RY")
{
    field(PREC, "6")
    field(EGU, "deg")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(ao, "$(BASE):CMD:RZ")
{
    field(PREC, "6")
    field(EGU, "deg")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

# Stop
record(bo, "$(BASE):CMD:STOP")
{
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto simple_cmd($(BASE),stop) $(DEV)")
    field(ZNAM, "Stop")
    field(ONAM, "Stop")
}

# Pose reachable?
record(bo, "$(BASE):CMD:REACHABLE")
{
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto reachable_mm($(BASE)) $(DEV)")
    field(ZNAM, "Check pose")
    field(ONAM, "Check pose")
}

record(bi, "$(BASE):REACHABLE")
{
    field(DTYP, "Soft Channel")
    field(ZNAM, "Unreachable")
    field(ONAM, "Reachable")
    field(VAL,  "1")
    field(PINI, "YES")
    field(ZSV, "MINOR")
}

# Positions - Readback
record(bo, "$(BASE):CMD:POS_RBV") {
  field(DESC, "Readback current pose position")
  field(VAL, "0")
  field(DTYP, "stream")
  field(OUT,  "@SmarPod.proto read_pos($(BASE)) $(DEV)")
  field(PINI, "NO")
  field(SCAN, ".1 second")
}

record(ai, "$(BASE):X_M")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "m")
    field(FLNK, "$(BASE):X")
}

record(ai, "$(BASE):Y_M")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "m")
    field(FLNK, "$(BASE):Y")
}

record(ai, "$(BASE):Z_M")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "m")
    field(FLNK, "$(BASE):Z")
}

record(calc, "$(BASE):X")
{
    field(INPA, "$(BASE):X_M NPP MS")
    field(CALC, "A * 1000")
    field(PREC, "5")
    field(EGU, "mm")
    field(MDEL, "1e-3")
}

record(calc, "$(BASE):Y")
{
    field(INPA, "$(BASE):Y_M NPP MS")
    field(CALC, "A * 1000")
    field(PREC, "5")
    field(EGU, "mm")
    field(MDEL, "1e-3")
}

record(calc, "$(BASE):Z")
{
    field(INPA, "$(BASE):Z_M NPP MS")
    field(CALC, "A * 1000")
    field(PREC, "5")
    field(EGU, "mm")
    field(MDEL, "1e-3")
}

record(ai, "$(BASE):RX")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "deg")
    field(MDEL, "1e-3")
}

record(ai, "$(BASE):RY")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "deg")
    field(MDEL, "1e-3")
}

record(ai, "$(BASE):RZ")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "deg")
    field(MDEL, "1e-3")
}

# Movement - readback
record(mbbi, "$(BASE):MOVING")
{
    field(DESC, "Movement status")
    field(VAL, "0")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_int($(BASE),mst) $(DEV)")
    field(PINI, "NO")
    field(SCAN, ".2 second")
    field(ZRVL, 0)
    field(ONVL, 1)
    field(TWVL, 2)

    field(ZRST, "Stopped")
    field(ONST, "Holding")
    field(TWST, "Moving")
}

# Movement - sync
record(bo, "$(BASE):CMD:SYNC") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto sync_mm($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(ZNAM, "Sync")
    field(ONAM, "Sync")
}

record(longin, "$(BASE):ERROR_CODE")
{
    field(DTYP, "Soft Channel")
    field(FLNK, "$(BASE):ERROR_DESC")
    field(PINI, "YES")
    field(LOW, 0)
    field(HIGH, 0)
    field(LSV, "MINOR")
    field(HSV, "MINOR")
    #field(LOLO, 0)
    #field(HIHI, 0)
}
record(stringin, "$(BASE):ERROR_DESC")
{
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto check_error($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
}


# Pivot-point
record(bo, "$(BASE):CMD:PIVOT_RBV") {
  field(DESC, "Readback pivot point")
  field(VAL, "0")
  field(DTYP, "stream")
  field(OUT,  "@SmarPod.proto read_pivot($(BASE)) $(DEV)")
  field(PINI, "YES")
  field(SCAN, "Passive")
}

record(bo, "$(BASE):CMD:SET_PIVOT")
{
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto set_pivot_mm($(BASE)) $(DEV)")
    field(FLNK, "$(BASE):CMD:PIVOT_RBV")
}

record(bo, "$(BASE):CMD:SYNC_PIVOT") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto sync_pivot_mm($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(ZNAM, "Sync")
    field(ONAM, "Sync")
}

record(mbbo, "$(BASE):CMD:PIVOT_MODE") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto set_int($(BASE),pvm) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(FLNK, "$(BASE):PIVOT_MODE")
    field(ZRVL, 0)
    field(ONVL, 1)

    field(ZRST, "Relative")
    field(ONST, "Fixed")
}

record(mbbi, "$(BASE):PIVOT_MODE")
{
    field(DESC, "Pivot mode")
    field(VAL, "0")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_int($(BASE),pvm) $(DEV)")
    field(PINI, "YES")
    field(SCAN, "Passive")
    field(ZRVL, 0)
    field(ONVL, 1)

    field(ZRST, "Relative")
    field(ONST, "Fixed")
}

# Pivot positions
record(ai, "$(BASE):PX_M")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "m")
    field(FLNK, "$(BASE):PX")
}

record(ai, "$(BASE):PY_M")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "m")
    field(FLNK, "$(BASE):PY")
}

record(ai, "$(BASE):PZ_M")
{
    field(DTYP, "Soft Channel")
    field(PREC, "5")
    field(EGU, "m")
    field(FLNK, "$(BASE):PZ")
}

record(calc, "$(BASE):PX")
{
    field(INPA, "$(BASE):PX_M NPP MS")
    field(CALC, "A * 1000")
    field(PREC, "5")
    field(EGU, "mm")
}

record(calc, "$(BASE):PY")
{
    field(INPA, "$(BASE):PY_M NPP MS")
    field(CALC, "A * 1000")
    field(PREC, "5")
    field(EGU, "mm")
}

record(calc, "$(BASE):PZ")
{
    field(INPA, "$(BASE):PZ_M NPP MS")
    field(CALC, "A * 1000")
    field(PREC, "5")
    field(EGU, "mm")
}

# Pivot request positions
record(ao, "$(BASE):CMD:PX")
{
    field(PREC, "6")
    field(EGU, "mm")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(ao, "$(BASE):CMD:PY")
{
    field(PREC, "6")
    field(EGU, "mm")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(ao, "$(BASE):CMD:PZ")
{
    field(PREC, "6")
    field(EGU, "mm")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

# Miscellaneous
record(bo, "$(BASE):CMD:CALIBRATE") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto calibrate($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(ZNAM, "Calibrate")
    field(ONAM, "Calibrate")
}

record(bo, "$(BASE):CMD:READ_VER") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto read_version($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(ZNAM, "Read version")
    field(ONAM, "Read version")
}

record(stringin, "$(BASE):VER:SYS") {
    field(DTYP, "Soft Channel")
}

# Device info
record(stringin, "$(BASE):VER:SN") {
    field(DTYP, "Soft Channel")
}

record(stringin, "$(BASE):VER:PRODUCT") {
    field(DTYP, "Soft Channel")
}

record(stringin, "$(BASE):VER:FIRMWARE") {
    field(DTYP, "Soft Channel")
}

# Status
record(bo, "$(BASE):CMD:READ_STATUS") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto read_status($(BASE)) $(DEV)")
    field(PINI, "NO")
    field(ZNAM, "Read status")
    field(ONAM, "Read status")
    field(SCAN, "10 second")
}

record(ai, "$(BASE):STATUS:TEMP") {
    field(DTYP, "Soft Channel")
    field(EGU, "C")
}
record(ai, "$(BASE):STATUS:LOAD") {
    field(DTYP, "Soft Channel")
    field(EGU, "%")
}
record(ai, "$(BASE):STATUS:MEMORY") {
    field(DTYP, "Soft Channel")
    field(EGU, "%")
}
record(ai, "$(BASE):STATUS:NET_BYTES_IN") {
    field(DTYP, "Soft Channel")
    field(EGU, "bytes")
}
record(ai, "$(BASE):STATUS:NET_BYTES_OUT") {
    field(DTYP, "Soft Channel")
    field(EGU, "bytes")
}
record(stringin, "$(BASE):STATUS:NET") {
    field(DTYP, "Soft Channel")
}
record(stringin, "$(BASE):STATUS:STATUS") {
    field(DTYP, "Soft Channel")
}
record(longin, "$(BASE):STATUS:BOOTCNT") {
    field(DTYP, "Soft Channel")
}
record(stringin, "$(BASE):STATUS:UPTIME") {
    field(DTYP, "Soft Channel")
}
record(stringin, "$(BASE):STATUS:IP") {
    field(DTYP, "Soft Channel")
}
record(stringin, "$(BASE):STATUS:CLIENT_IP") {
    field(DTYP, "Soft Channel")
}
record(stringin, "$(BASE):STATUS:SER_STATUS") {
    field(DTYP, "Soft Channel")
}
record(ai, "$(BASE):STATUS:SER_BYTES_IN") {
    field(DTYP, "Soft Channel")
    field(EGU, "bytes")
}
record(ai, "$(BASE):STATUS:SER_BYTES_OUT") {
    field(DTYP, "Soft Channel")
    field(EGU, "bytes")
}
record(stringin, "$(BASE):STATUS:DISPLAY") {
    field(DTYP, "Soft Channel")
}

# Sensor mode
record(mbbo, "$(BASE):CMD:SENSOR_MODE") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto set_int_init($(BASE),sen) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(FLNK, "$(BASE):SENSOR_MODE")
    field(ZRVL, 0)
    field(ONVL, 1)
    field(TWVL, 2)

    field(ZRST, "Disabled")
    field(ONST, "Enabled")
    field(TWST, "Power-save")
    field(FLNK, "$(BASE):SENSOR_MODE")
}

record(mbbi, "$(BASE):SENSOR_MODE")
{
    field(DESC, "Sensor mode")
    field(VAL, "0")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_int($(BASE),sen) $(DEV)")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(ZRVL, 0)
    field(ONVL, 1)
    field(TWVL, 2)

    field(ZRST, "Disabled")
    field(ONST, "Enabled")
    field(TWST, "Power-save")
}

# Maximum frequency
record(ao, "$(BASE):CMD:FREQ") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto set_float_init($(BASE),frq) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(EGU, "Hz")
    field(PREC, "1")
    field(FLNK, "$(BASE):FREQ")
}

record(ai, "$(BASE):FREQ")
{
    field(DESC, "Maximum frequency")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_float($(BASE),frq) $(DEV)")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(EGU, "Hz")
    field(VAL, "5000")
    field(PREC, "1")
}

# Maximum velocity
record(ao, "$(BASE):CMD:VEL") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto set_float_init($(BASE),vel) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(EGU, "m/s")
    field(PREC, "5")
    field(FLNK, "$(BASE):VEL")
}

record(ai, "$(BASE):VEL")
{
    field(DESC, "Velocity")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_float($(BASE),vel) $(DEV)")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(EGU, "m/s")
    field(PREC, "5")
    field(VAL, "1")
}

# Maximum acceleration
record(ao, "$(BASE):CMD:ACCEL") {
    field(DTYP, "stream")
    field(OUT,  "@SmarPod.proto set_float($(BASE),acc) $(DEV)")
    field(PINI, "NO")
    field(SCAN, "Passive")
    field(EGU, "m/s^2")
    field(PREC, "5")
    field(FLNK, "$(BASE):ACCEL")
}

record(ai, "$(BASE):ACCEL")
{
    field(DESC, "Acceleration")
    field(DTYP, "stream")
    field(INP,  "@SmarPod.proto read_float($(BASE),acc) $(DEV)")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(EGU, "m/s^2")
    field(PREC, "5")
    field(VAL, "0.5")
}

# Read and Set Poses
# Pose 1:
record(stringout, "$(BASE):POSE_1:NAME")
{
    field(DTYP, "Soft Channel")
    field(DESC, "Pose 1 name input")
    field(FLNK, "$(BASE):POSE_1:NAME_RBV")
}

record(stringin, "$(BASE):POSE_1:NAME_RBV")
{
    field(DTYP, "Soft Channel")
    field(INP,  "$(BASE):POSE_1:NAME")
    field(DESC, "Pose 1 name readback")
}

record(ai, "$(BASE):POSE_1:X")
{
    field(DESC, "Pose 1 X Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):X")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_1:Y")
{
    field(DESC, "Pose 1 Y Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Y")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_1:Z")
{
    field(DESC, "Pose 1 Z Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Z")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_1:RX")
{
    field(DESC, "Pose 1 RX Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RX")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_1:RY")
{
    field(DESC, "Pose 1 RY Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RY")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_1:RZ")
{
    field(DESC, "Pose 1 RZ Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RZ")
    field(EGU, "mm")
}

record(fanout, "$(BASE):POSE_1:RECORD")
{
    field(DESC, "Fanout record for recording pose")
    field(SELM, "All")
    field(LNK1, "$(BASE):POSE_1:X")
    field(LNK2, "$(BASE):POSE_1:Y")
    field(LNK3, "$(BASE):POSE_1:Z")
    field(LNK4, "$(BASE):POSE_1:RX")
    field(LNK5, "$(BASE):POSE_1:RY")
    field(LNK6, "$(BASE):POSE_1:RZ")
}

record(seq, "$(BASE):POSE_1:GO")
{
    field(DESC, "Enacts Pose 1 Positions")
    field(DOL1, "$(BASE):POSE_1:X")
    field(DOL2, "$(BASE):POSE_1:Y")
    field(DOL3, "$(BASE):POSE_1:Z")
    field(DOL4, "$(BASE):POSE_1:RX")
    field(DOL5, "$(BASE):POSE_1:RY")
    field(DOL6, "$(BASE):POSE_1:RZ")
    field(DO7,  "1")
    field(LNK1, "$(BASE):CMD:X")
    field(LNK2, "$(BASE):CMD:Y")
    field(LNK3, "$(BASE):CMD:Z")
    field(LNK4, "$(BASE):CMD:RX")
    field(LNK5, "$(BASE):CMD:RY")
    field(LNK6, "$(BASE):CMD:RZ")
    field(LNK7, "$(BASE):CMD:MOVE.PROC")
}

# Pose 2:
record(stringout, "$(BASE):POSE_2:NAME")
{
    field(DTYP, "Soft Channel")
    field(DESC, "Pose 2 name input")
    field(FLNK, "$(BASE):POSE_2:NAME_RBV")
}

record(stringin, "$(BASE):POSE_2:NAME_RBV")
{
    field(DTYP, "Soft Channel")
    field(INP,  "$(BASE):POSE_1:NAME")
    field(DESC, "Pose 2 name readback")
}

record(ai, "$(BASE):POSE_2:X")
{
    field(DESC, "Pose 2 X Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):X")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_2:Y")
{
    field(DESC, "Pose 2 Y Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Y")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_2:Z")
{
    field(DESC, "Pose 2 Z Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Z")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_2:RX")
{
    field(DESC, "Pose 2 RX Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RX")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_2:RY")
{
    field(DESC, "Pose 2 RY Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RY")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_2:RZ")
{
    field(DESC, "Pose 2 RZ Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RZ")
    field(EGU, "mm")
}

record(fanout, "$(BASE):POSE_2:RECORD")
{
    field(DESC, "Fanout record for recording pose")
    field(SELM, "All")
    field(LNK1, "$(BASE):POSE_2:X")
    field(LNK2, "$(BASE):POSE_2:Y")
    field(LNK3, "$(BASE):POSE_2:Z")
    field(LNK4, "$(BASE):POSE_2:RX")
    field(LNK5, "$(BASE):POSE_2:RY")
    field(LNK6, "$(BASE):POSE_2:RZ")
}

record(seq, "$(BASE):POSE_2:GO")
{
    field(DESC, "Enacts Pose 2 Positions")
    field(DOL1, "$(BASE):POSE_2:X")
    field(DOL2, "$(BASE):POSE_2:Y")
    field(DOL3, "$(BASE):POSE_2:Z")
    field(DOL4, "$(BASE):POSE_2:RX")
    field(DOL5, "$(BASE):POSE_2:RY")
    field(DOL6, "$(BASE):POSE_2:RZ")
    field(DO7,  "1")
    field(LNK1, "$(BASE):CMD:X")
    field(LNK2, "$(BASE):CMD:Y")
    field(LNK3, "$(BASE):CMD:Z")
    field(LNK4, "$(BASE):CMD:RX")
    field(LNK5, "$(BASE):CMD:RY")
    field(LNK6, "$(BASE):CMD:RZ")
    field(LNK7, "$(BASE):CMD:MOVE")
}

# Pose 3:
record(stringout, "$(BASE):POSE_3:NAME")
{
    field(DTYP, "Soft Channel")
    field(DESC, "Pose 3 name input")
    field(FLNK, "$(BASE):POSE_3:NAME_RBV")
}

record(stringin, "$(BASE):POSE_3:NAME_RBV")
{
    field(DTYP, "Soft Channel")
    field(INP,  "$(BASE):POSE_3:NAME")
    field(DESC, "Pose 3 name readback")
}

record(ai, "$(BASE):POSE_3:X")
{
    field(DESC, "Pose 3 X Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):X")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_3:Y")
{
    field(DESC, "Pose 3 Y Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Y")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_3:Z")
{
    field(DESC, "Pose 3 Z Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Z")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_3:RX")
{
    field(DESC, "Pose 3 RX Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RX")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_3:RY")
{
    field(DESC, "Pose 3 RY Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RY")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_3:RZ")
{
    field(DESC, "Pose 3 RZ Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RZ")
    field(EGU, "mm")
}

record(fanout, "$(BASE):POSE_3:RECORD")
{
    field(DESC, "Fanout record for recording pose")
    field(SELM, "All")
    field(LNK1, "$(BASE):POSE_3:X")
    field(LNK2, "$(BASE):POSE_3:Y")
    field(LNK3, "$(BASE):POSE_3:Z")
    field(LNK4, "$(BASE):POSE_3:RX")
    field(LNK5, "$(BASE):POSE_3:RY")
    field(LNK6, "$(BASE):POSE_3:RZ")
}

record(seq, "$(BASE):POSE_3:GO")
{
    field(DESC, "Enacts Pose 3 Positions")
    field(DOL1, "$(BASE):POSE_3:X")
    field(DOL2, "$(BASE):POSE_3:Y")
    field(DOL3, "$(BASE):POSE_3:Z")
    field(DOL4, "$(BASE):POSE_3:RX")
    field(DOL5, "$(BASE):POSE_3:RY")
    field(DOL6, "$(BASE):POSE_3:RZ")
    field(DO7,  "1")
    field(LNK1, "$(BASE):CMD:X")
    field(LNK2, "$(BASE):CMD:Y")
    field(LNK3, "$(BASE):CMD:Z")
    field(LNK4, "$(BASE):CMD:RX")
    field(LNK5, "$(BASE):CMD:RY")
    field(LNK6, "$(BASE):CMD:RZ")
    field(LNK7, "$(BASE):CMD:MOVE")
}

# Pose 4:
record(stringout, "$(BASE):POSE_4:NAME")
{
    field(DTYP, "Soft Channel")
    field(DESC, "Pose 4 name input")
    field(FLNK, "$(BASE):POSE_4:NAME_RBV")
}

record(stringin, "$(BASE):POSE_4:NAME_RBV")
{
    field(DTYP, "Soft Channel")
    field(INP,  "$(BASE):POSE_4:NAME")
    field(DESC, "Pose 4 name readback")
}

record(ai, "$(BASE):POSE_4:X")
{
    field(DESC, "Pose 4 X Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):X")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_4:Y")
{
    field(DESC, "Pose 4 Y Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Y")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_4:Z")
{
    field(DESC, "Pose 4 Z Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Z")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_4:RX")
{
    field(DESC, "Pose 4 RX Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RX")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_4:RY")
{
    field(DESC, "Pose 4 RY Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RY")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_4:RZ")
{
    field(DESC, "Pose 4 RZ Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RZ")
    field(EGU, "mm")
}

record(fanout, "$(BASE):POSE_4:RECORD")
{
    field(DESC, "Fanout record for recording pose")
    field(SELM, "All")
    field(LNK1, "$(BASE):POSE_4:X")
    field(LNK2, "$(BASE):POSE_4:Y")
    field(LNK3, "$(BASE):POSE_4:Z")
    field(LNK4, "$(BASE):POSE_4:RX")
    field(LNK5, "$(BASE):POSE_4:RY")
    field(LNK6, "$(BASE):POSE_4:RZ")
}

record(seq, "$(BASE):POSE_4:GO")
{
    field(DESC, "Enacts Pose 4 Positions")
    field(DOL1, "$(BASE):POSE_4:X")
    field(DOL2, "$(BASE):POSE_4:Y")
    field(DOL3, "$(BASE):POSE_4:Z")
    field(DOL4, "$(BASE):POSE_4:RX")
    field(DOL5, "$(BASE):POSE_4:RY")
    field(DOL6, "$(BASE):POSE_4:RZ")
    field(DO7,  "1")
    field(LNK1, "$(BASE):CMD:X")
    field(LNK2, "$(BASE):CMD:Y")
    field(LNK3, "$(BASE):CMD:Z")
    field(LNK4, "$(BASE):CMD:RX")
    field(LNK5, "$(BASE):CMD:RY")
    field(LNK6, "$(BASE):CMD:RZ")
    field(LNK7, "$(BASE):CMD:MOVE")
}

# Pose 5:
record(stringout, "$(BASE):POSE_5:NAME")
{
    field(DTYP, "Soft Channel")
    field(DESC, "Pose 5 name input")
    field(FLNK, "$(BASE):POSE_5:NAME_RBV")
}

record(stringin, "$(BASE):POSE_5:NAME_RBV")
{
    field(DTYP, "Soft Channel")
    field(INP,  "$(BASE):POSE_5:NAME")
    field(DESC, "Pose 5 name readback")
}

record(ai, "$(BASE):POSE_5:X")
{
    field(DESC, "Pose 5 X Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):X")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_5:Y")
{
    field(DESC, "Pose 5 Y Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Y")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_5:Z")
{
    field(DESC, "Pose 5 Z Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):Z")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_5:RX")
{
    field(DESC, "Pose 5 RX Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RX")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_5:RY")
{
    field(DESC, "Pose 5 RY Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RY")
    field(EGU, "mm")
}

record(ai, "$(BASE):POSE_5:RZ")
{
    field(DESC, "Pose 5 RZ Position Data")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(INP,  "$(BASE):RZ")
    field(EGU, "mm")
}

record(fanout, "$(BASE):POSE_5:RECORD")
{
    field(DESC, "Fanout record for recording pose")
    field(SELM, "All")
    field(LNK1, "$(BASE):POSE_5:X")
    field(LNK2, "$(BASE):POSE_5:Y")
    field(LNK3, "$(BASE):POSE_5:Z")
    field(LNK4, "$(BASE):POSE_5:RX")
    field(LNK5, "$(BASE):POSE_5:RY")
    field(LNK6, "$(BASE):POSE_5:RZ")
}

record(seq, "$(BASE):POSE_5:GO")
{
    field(DESC, "Enacts Pose 5 Positions")
    field(DOL1, "$(BASE):POSE_5:X")
    field(DOL2, "$(BASE):POSE_5:Y")
    field(DOL3, "$(BASE):POSE_5:Z")
    field(DOL4, "$(BASE):POSE_5:RX")
    field(DOL5, "$(BASE):POSE_5:RY")
    field(DOL6, "$(BASE):POSE_5:RZ")
    field(DO7,  "1")
    field(LNK1, "$(BASE):CMD:X")
    field(LNK2, "$(BASE):CMD:Y")
    field(LNK3, "$(BASE):CMD:Z")
    field(LNK4, "$(BASE):CMD:RX")
    field(LNK5, "$(BASE):CMD:RY")
    field(LNK6, "$(BASE):CMD:RZ")
    field(LNK7, "$(BASE):CMD:MOVE")
}
 
