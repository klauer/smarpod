Separator = CR LF;
ExtraInput = Ignore;

valid_chars = "[a-zA-Z0-9._: ]";

check_error {
    out "\%code? %(\$1{\$2}Err-I)d";
    in "%(\$1{\$2}ErrDesc-I)" $valid_chars;
}

initialize_smarpod {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    # Set CRLF as line end
    out "\%set lineend-format 0";
    in "!0";

    # Set automatic (fixed/scientific) format for numbers
    out "\%set number-format 0";
    in "!0";
}

# Pivot

read_pivot {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    out "piv?";
    in "%(\$1{\$2-Ax:1}Piv_)f %(\$1{\$2-Ax:2}Piv_)f %(\$1{\$2-Ax:3}Piv_)f";
}

sync_pivot_mm {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    
    # Sync request with readback values
    out "\%echo %(\$1{\$2-Ax:1}Piv-I)g %(\$1{\$2-Ax:2}Piv-I)g %(\$1{\$2-Ax:3}Piv-I)g";
    in "%(\$1{\$2-Ax:1}Piv-SP)f %(\$1{\$2-Ax:2}Piv-SP)f %(\$1{\$2-Ax:3}Piv-SP)f";
}

set_pivot_mm {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    # Append m to indicate mm positions
    out "piv %(\$1{\$2-Ax:1}Piv-SP)gm %(\$1{\$2-Ax:2}Piv-SP)gm %(\$1{\$2-Ax:3}Piv-SP)gm";
    in "!0";
}

# Positions/movement
read_pos {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    out "pos?";
    in "%(\$1{\$2-Ax:1}Pos_)f %(\$1{\$2-Ax:2}Pos_)f %(\$1{\$2-Ax:3}Pos_)f %(\$1{\$2-Ax:1}Rot-I)f %(\$1{\$2-Ax:2}Rot-I)f %(\$1{\$2-Ax:3}Rot-I)f";
}

sync_mm {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    
    # Sync request with readback values (this uses the current values instead of querying
    # again, as they are already properly scaled in mm)
    out "\%echo %(\$1{\$2-Ax:1}Pos-I)g %(\$1{\$2-Ax:2}Pos-I)g %(\$1{\$2-Ax:3}Pos-I)g %(\$1{\$2-Ax:1}Rot-I)g %(\$1{\$2-Ax:2}Rot-I)g %(\$1{\$2-Ax:3}Rot-I)g";
    in "%(\$1{\$2-Ax:1}Pos-SP)f %(\$1{\$2-Ax:2}Pos-SP)f %(\$1{\$2-Ax:3}Pos-SP)f %(\$1{\$2-Ax:1}Rot-SP)f %(\$1{\$2-Ax:2}Rot-SP)f %(\$1{\$2-Ax:3}Rot-SP)f";
}

move_mm {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    # Append m to indicate mm positions
    out "mov %(\$1{\$2-Ax:1}Pos-SP)gm %(\$1{\$2-Ax:2}Pos-SP)gm %(\$1{\$2-Ax:3}Pos-SP)gm %(\$1{\$2-Ax:1}Rot-SP)g %(\$1{\$2-Ax:2}Rot-SP)g %(\$1{\$2-Ax:3}Rot-SP)g";
    in "!0";
}

reachable_mm {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    # Append m to indicate mm positions
    out "rea? %(\$1{\$2-Ax:1}Pos-SP)gm %(\$1{\$2-Ax:2}Pos-SP)gm %(\$1{\$2-Ax:3}Pos-SP)gm %(\$1{\$2-Ax:1}Rot-SP)g %(\$1{\$2-Ax:2}Rot-SP)g %(\$1{\$2-Ax:3}Rot-SP)g";
    in "%(\$1{\$2}Reach-I)d";
}

# Referencing

async_ref_response {
    # Not sure if this works as expected.
    in "(Reference response)";
    in "!%d";
}

reference {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    # Referencing can take a long time
    # If we fail to get a reply within that time, responses will become confused
    ReplyTimeout = 100;

    out "ref";
    out "\%echo (Reference response)";
    wait 15000;
    in "(Reference response)";
    in "!0";
}

calibrate {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }

    # Calibration can take a long time
    # If we fail to get a reply within that time, responses will become confused
    ReplyTimeout = 100;

    out "cal";
    out "\%echo (Reference response)";
    wait 15000;
    in "(Reference response)";
    in "!0";
}

# Version information
read_version {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    out "\%info version";
    in "Versions:";
    in "  SmarAct Embedded Controller %(\$1{\$2}Ver:Sys)" $valid_chars;
    in "  MCS library%(\$1{\$2}Ver:Mcs)" $valid_chars;
    in "  SmarPod library: %(\$1{\$2}Ver:SPod)" $valid_chars;
}

read_status {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    out "\%info status";
    in "Status: %(\$1{\$2}Sts)" $valid_chars;
    in "System Time: %(\$1{\$2}Sts:Uptime)" $valid_chars;
    in "Temperature: %(\$1{\$2}Sts:Temp)f";
    in "CPU Load: %(\$1{\$2}Sts:Load)f";
    in "Network IO: %(\$1{\$2}Sts:Net)" $valid_chars "(%(\$1{\$2}Sts:NetIn)d bytes read, %(\$1{\$2}Sts:NetOut)d bytes written, %(\$1{\$2}Sts:Conn)d connections)";
    in "IP address: %(\$1{\$2}Sts:Ip)" $valid_chars;
    in "Connected network client: %(\$1{\$2}Sts:ClientIP)" $valid_chars;
    in "Serial IO: %(\$1{\$2}Sts:Ser)" $valid_chars "(%(\$1{\$2}Sts:SerIn)d bytes read, %(\$1{\$2}Sts:SerOut)d bytes written)";
    in "Low-Level: %(\$1{\$2}Sts:LowLevel)" $valid_chars;
}

# Generic
read_int {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    out "\$3?";
    in "%d";
}

set_int {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    out "\$3 %d";
    in "!0";
}

read_float {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    out "\$3?";
    in "%f";
}

set_float {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    out "\$3 %f";
    in "!0";
}
simple_cmd {
    @mismatch { in "!%(\$1{\$2}Err-I)d"; }
    out "\$3";
    in "!0";
}

#
# %info status
# Status: ready
# System Time: 1d:21h:3233s
# Temperature: 50.00
# CPU Load: 0.00
# Network IO: ok (910158 bytes read, 5764892 bytes written, 41 connections)
# IP address: 10.0.3.1
# Connected network client: 10.0.0.1
# Serial IO: ok (0 bytes read, 0 bytes written)
# Low-Level: 0
# 
# 
# %info version
# Versions:
#   SmarAct Embedded Controller 1.1.1
#   MCS library
#   SmarPod library: 1.4.9
# 
# %info units
# units:
#   u0: smarpod #0: model 10001, mcs #0 (id 3155076337) (active)

